openapi: 3.0.1
info:
  title: Spring Credit Card
  description: Spring Credit Card Sample Application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: '1.0'
servers:
  - url: http://localhost:8080/api/client/v1/
tags:
  - name: client
    description: Endpoints related to Client.
  - name: product
    description: Endpoints related to Product.
paths:
  /client/{clientId}:
    get:
      tags:
        - client
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRes'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Client  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /client:
    post:
      tags:
        - client
      operationId: addClient
      summary: Adds a client
      description: Records the details of a new client.
      requestBody:
        description: The client
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRes'
        required: true
      responses:
        201:
          description: The client was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /product:
    post:
      tags:
        - product
      operationId: addProduct
      summary: Adds a product
      description: Records the details of a new product.
      requestBody:
        description: The Prodcut
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRes'
        required: true
      responses:
        201:
          description: The product was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
components:
  schemas:
    RestError:
      title: REST Error
      description: The schema for all error responses.
      type: object
      properties:
        status:
          title: Status
          description: The HTTP status code.
          type: integer
          format: int32
          example: 400
          readOnly: true
        error:
          title: Error
          description: The short error message.
          type: string
          example: Bad Request
          readOnly: true
        path:
          title: Path
          description: The path of the URL for this request.
          type: string
          format: uri
          example: '/api/client/v1'
          readOnly: true
        timestamp:
          title: Timestamp
          description: The time the error occured.
          type: string
          format: date-time
          example: '2023-01-21T21:41:46.158+0000'
          readOnly: true
        message:
          title: Message
          description: The long error message.
          type: string
          example: 'Request failed schema validation'
          readOnly: true
        trace:
          title: Trace
          description: The stacktrace for this error.
          type: string
          example: 'com.atlassian.oai.validator.springmvc.InvalidRequestException: ...'
          readOnly: true
      required:
        - status
        - error
        - path
        - timestamp
        - message
        - schemaValidationError
    Response:
      title: REST Ok
      description: The schema for exit response.
      type: object
      properties:
        status:
          title: Status
          description: The HTTP status code.
          type: integer
          format: int32
          example: 201
          readOnly: true
        message:
          title: Message
          description: The short message.
          type: string
          example: "The transaction was sucessfully."
          readOnly: true
    ClientFields:
      title: Client fields
      description: Editable fields of a Client.
      type: object
      properties:
        id:
          title: Id
          description: The ID of the Client.
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          title: Name
          description: The Name of the client.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: Romario Rodrigo
        address:
          title: Address
          description: The postal address of the client.
          type: string
          minLength: 1
          maxLength: 255
          example: 'Jr Salaverry 401'
        city:
          title: City
          description: The city of the client.
          type: string
          minLength: 1
          maxLength: 80
          example: Lima
        telephone:
          title: Telephone number
          description: The telephone number of the client.
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]*$'
          example: '999999998'
      required:
        - id
        - name
        - telephone
    ClientRes:
      title: Client
      description: A Client.
      allOf:
        - $ref: '#/components/schemas/ClientFields'
        - type: object
          properties:
            products:
              title: Products
              description: List of product by Client.
              type: array
              items:
                $ref: '#/components/schemas/ProductRes'
              readOnly: true
          required:
            - products
    ProductRes:
      title: Product
      description: A Product.
      allOf:
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the product.
              type: string
              format: uuid
              example: 'b76e3369-f2bc-4b5b-882c-c6f196727841'
              readOnly: true
            clientId:
              title: Id
              description: The ID of the Client.
              type: integer
              format: int64
              example: 1
            type:
              title: Type
              description: The type of the product.
              type: string
              minLength: 1
              maxLength: 80
              example: Credit Card
            status:
              title: Status
              description: The status of product.
              type: integer
              minLength: 1
              maxLength: 1
              example: 1
            amount:
              title: Amount
              description: The amount of credit.
              type: number
              format: double
              example: 20.551
          required:
            - id
            - clientId
            - type